{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\ovning-memory-game-Nina-FEU20\\\\memory-game\\\\src\\\\components\\\\GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MemoryCard from \"./MemoryCard\";\n\nfunction GameBoard() {\n  _s();\n\n  const [points, setPoints] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n  const [firstCard, setFirstCard] = useState(0);\n  const [secondCard, setSecondCard] = useState(0);\n  const [isMatch, setIsMatch] = useState(false);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [isClicked, setIsClicked] = useState([]);\n  const [isFound, setIsFound] = useState([]);\n  useEffect(() => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n    setNumbers(shuffle(numbers));\n  }, []);\n  useEffect(() => {\n    compareCards();\n  }, [secondCard]);\n\n  function shuffle(array) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  function updateScore() {\n    setPoints(points + 1);\n  }\n\n  function compareCards() {\n    if (firstCard === secondCard && firstCard !== 0) {\n      updateScore();\n      resetCards();\n      setIsMatch(true);\n      setIsFound(...isFound, isClicked);\n    } else if (firstCard !== 0) {\n      const newClicked = isClicked.pop();\n      console.log(newClicked);\n      resetCards();\n      setTimeout(function () {\n        setIsClicked(...newClicked);\n      }, 1000); //   setIsFlipped(false);\n\n      setIsMatch(false);\n    }\n  }\n\n  function resetCards() {\n    setFirstCard(0);\n    setSecondCard(0);\n  }\n\n  function disable() {// do nothing\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: numbers.map((number, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          className: isClicked.includes(index) ? \"memory-card flip\" : \"memory-card\",\n          index: index,\n          number: number,\n          firstCard: firstCard,\n          secondCard: secondCard,\n          setFirstCard: setFirstCard,\n          setSecondCard: setSecondCard,\n          isFlipped: isFlipped,\n          setIsFlipped: setIsFlipped,\n          isMatch: isMatch,\n          setIsClicked: setIsClicked,\n          isClicked: isClicked\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"par: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), points === 8 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameBoard, \"0UULakXsKHF0PRrL3OLDEgcNt5U=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/ovning-memory-game-Nina-FEU20/memory-game/src/components/GameBoard.js"],"names":["React","useEffect","useState","MemoryCard","GameBoard","points","setPoints","numbers","setNumbers","firstCard","setFirstCard","secondCard","setSecondCard","isMatch","setIsMatch","isFlipped","setIsFlipped","isClicked","setIsClicked","isFound","setIsFound","shuffle","compareCards","array","sort","Math","random","updateScore","resetCards","newClicked","pop","console","log","setTimeout","disable","map","number","index","includes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MemoryCard from \"./MemoryCard\";\r\n\r\nfunction GameBoard() {\r\n  const [points, setPoints] = useState(0);\r\n  const [numbers, setNumbers] = useState([]);\r\n  const [firstCard, setFirstCard] = useState(0);\r\n  const [secondCard, setSecondCard] = useState(0);\r\n  const [isMatch, setIsMatch] = useState(false);\r\n\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const [isClicked, setIsClicked] = useState([]);\r\n  const [isFound, setIsFound] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\r\n    setNumbers(shuffle(numbers));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    compareCards();\r\n  }, [secondCard]);\r\n\r\n  function shuffle(array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function updateScore() {\r\n    setPoints(points + 1);\r\n  }\r\n\r\n  function compareCards() {\r\n    if (firstCard === secondCard && firstCard !== 0) {\r\n      updateScore();\r\n      resetCards();\r\n      setIsMatch(true);\r\n      setIsFound(...isFound, isClicked);\r\n    } else if (firstCard !== 0) {\r\n      const newClicked = isClicked.pop();\r\n      console.log(newClicked);\r\n      resetCards();\r\n      setTimeout(function () {\r\n        setIsClicked(...newClicked);\r\n      }, 1000);\r\n\r\n      //   setIsFlipped(false);\r\n      setIsMatch(false);\r\n    }\r\n  }\r\n\r\n  function resetCards() {\r\n    setFirstCard(0);\r\n    setSecondCard(0);\r\n  }\r\n\r\n  function disable() {\r\n    // do nothing\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"game-board\">\r\n        {numbers.map((number, index) => {\r\n          return (\r\n            <MemoryCard\r\n              className={\r\n                isClicked.includes(index) ? \"memory-card flip\" : \"memory-card\"\r\n              }\r\n              index={index}\r\n              number={number}\r\n              key={index}\r\n              firstCard={firstCard}\r\n              secondCard={secondCard}\r\n              setFirstCard={setFirstCard}\r\n              setSecondCard={setSecondCard}\r\n              isFlipped={isFlipped}\r\n              setIsFlipped={setIsFlipped}\r\n              isMatch={isMatch}\r\n              setIsClicked={setIsClicked}\r\n              isClicked={isClicked}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <p>par: {points}</p>\r\n      </div>\r\n      {points === 8 ? <h2>You Won!</h2> : \"\"}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n"]},"metadata":{},"sourceType":"module"}