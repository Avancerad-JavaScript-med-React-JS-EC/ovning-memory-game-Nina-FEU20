{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\ovning-memory-game-Nina-FEU20\\\\memory-game\\\\src\\\\components\\\\GameBoard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport MemoryCard from \"./MemoryCard\";\n\nfunction GameBoard() {\n  _s();\n\n  const [pairs, setPairs] = useState(0);\n  const [firstCard, setFirstCard] = useState(0);\n  const [secondCard, setSecondCard] = useState(0);\n  useEffect(() => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n    const randomNumbers = shuffle(numbers);\n  }, []);\n\n  function shuffle(array) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  function updateState(point) {\n    setPairs(point);\n    console.log(\"par \" + pairs);\n  }\n\n  function handleClick(e) {\n    console.log(\"target \" + e.target.id);\n\n    if (firstCard === 0) {\n      setFirstCard(e.target.id);\n      console.log(\"först \" + firstCard);\n    } else {\n      setSecondCard(e.target.id); // compareCards();\n    }\n  }\n\n  function compareCards() {\n    if (firstCard === secondCard) {\n      updateState(1);\n    } else {\n      toggleFlip();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      onClick: handleClick,\n      children: randomNumbers.map((number, index) => {\n        return /*#__PURE__*/_jsxDEV(MemoryCard, {\n          number: number,\n          updateState: updateState,\n          flip: isFlipped\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"par: \", pairs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameBoard, \"J/TuVIOxesQG+JsOYN8tMaPlhhg=\");\n\n_c = GameBoard;\nexport default GameBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/ovning-memory-game-Nina-FEU20/memory-game/src/components/GameBoard.js"],"names":["React","useEffect","useState","MemoryCard","GameBoard","pairs","setPairs","firstCard","setFirstCard","secondCard","setSecondCard","numbers","randomNumbers","shuffle","array","sort","Math","random","updateState","point","console","log","handleClick","e","target","id","compareCards","toggleFlip","map","number","index","isFlipped"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,EAA8C,CAA9C,CAAhB;AACA,UAAMC,aAAa,GAAGC,OAAO,CAACF,OAAD,CAA7B;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,WAASE,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,WAAOA,KAAK,CAACC,IAAN,CAAW,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD;;AAED,WAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1Bb,IAAAA,QAAQ,CAACa,KAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAShB,KAArB;AACD;;AAED,WAASiB,WAAT,CAAqBC,CAArB,EAAwB;AACtBH,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYE,CAAC,CAACC,MAAF,CAASC,EAAjC;;AAEA,QAAIlB,SAAS,KAAK,CAAlB,EAAqB;AACnBC,MAAAA,YAAY,CAACe,CAAC,CAACC,MAAF,CAASC,EAAV,CAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWd,SAAvB;AACD,KAHD,MAGO;AACLG,MAAAA,aAAa,CAACa,CAAC,CAACC,MAAF,CAASC,EAAV,CAAb,CADK,CAEL;AACD;AACF;;AAED,WAASC,YAAT,GAAwB;AACtB,QAAInB,SAAS,KAAKE,UAAlB,EAA8B;AAC5BS,MAAAA,WAAW,CAAC,CAAD,CAAX;AACD,KAFD,MAEO;AACLS,MAAAA,UAAU;AACX;AACF;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,OAAO,EAAEL,WAArC;AAAA,gBACGV,aAAa,CAACgB,GAAd,CAAkB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACpC,4BACE,QAAC,UAAD;AACE,UAAA,MAAM,EAAED,MADV;AAEE,UAAA,WAAW,EAAEX,WAFf;AAIE,UAAA,IAAI,EAAEa;AAJR,WAGOD,KAHP;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA,6BACE;AAAA,4BAASzB,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA1DQD,S;;KAAAA,S;AA4DT,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MemoryCard from \"./MemoryCard\";\r\n\r\nfunction GameBoard() {\r\n  const [pairs, setPairs] = useState(0);\r\n  const [firstCard, setFirstCard] = useState(0);\r\n  const [secondCard, setSecondCard] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\r\n    const randomNumbers = shuffle(numbers);\r\n  }, []);\r\n\r\n  function shuffle(array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  function updateState(point) {\r\n    setPairs(point);\r\n    console.log(\"par \" + pairs);\r\n  }\r\n\r\n  function handleClick(e) {\r\n    console.log(\"target \" + e.target.id);\r\n\r\n    if (firstCard === 0) {\r\n      setFirstCard(e.target.id);\r\n      console.log(\"först \" + firstCard);\r\n    } else {\r\n      setSecondCard(e.target.id);\r\n      // compareCards();\r\n    }\r\n  }\r\n\r\n  function compareCards() {\r\n    if (firstCard === secondCard) {\r\n      updateState(1);\r\n    } else {\r\n      toggleFlip();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"game-board\" onClick={handleClick}>\r\n        {randomNumbers.map((number, index) => {\r\n          return (\r\n            <MemoryCard\r\n              number={number}\r\n              updateState={updateState}\r\n              key={index}\r\n              flip={isFlipped}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        <p>par: {pairs}</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n"]},"metadata":{},"sourceType":"module"}